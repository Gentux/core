package main

import (
	"encoding/json"
	"fmt"
	"path/filepath"

	"github.com/dullgiulio/pingo"
	"log"
	"os"
	"os/exec"
)

type LDAPConfig struct {
	ScripsDir string
	Username  string
	Password  string
	ServerURL string
}

type AccountParams struct {
	UserId    string
	FirstName string
	LastName  string
	Email     string
	Password  string
}

type Ldap struct{}

var (
	g_LDAPConfig LDAPConfig
)

func (p *Ldap) Configure(jsonConfig string, _outMsg *string) error {
	var ldapConfig map[string]string

	err := json.Unmarshal([]byte(jsonConfig), &ldapConfig)
	if err != nil {
		r := fmt.Sprintf("ERROR: failed to unmarshal LDAP Plugin configuration : %s", err.Error())
		log.Printf(r)
		os.Exit(0)
		*_outMsg = r
		return nil
	}

	g_LDAPConfig.ServerURL = ldapConfig["serverUrl"]
	g_LDAPConfig.Username = ldapConfig["username"]
	g_LDAPConfig.Password = ldapConfig["password"]
	g_LDAPConfig.ScripsDir = ldapConfig["scriptsDir"]

	phpConfigFile, e := os.Create(filepath.Join(g_LDAPConfig.ScripsDir, "configuration.php"))
	if e != nil {
		r := fmt.Sprintf("ERROR: failed to configure php scripts : %s", err.Error())
		log.Printf(r)
		os.Exit(0)
		*_outMsg = r
		return nil
	}

	phpConfigFile.Write([]byte("<?php\n# DO NOT EDIT THIS FILE\n# automatically generated\n\n"))
	phpConfigFile.Write([]byte(fmt.Sprintf("$ldap_server = \"%s\";\n", g_LDAPConfig.ServerURL)))
	phpConfigFile.Write([]byte(fmt.Sprintf("$ldap_user = \"%s\";\n", g_LDAPConfig.Username)))
	phpConfigFile.Write([]byte(fmt.Sprintf("$ldap_pass = \"%s\";\n", g_LDAPConfig.Password)))
	phpConfigFile.Write([]byte("?>\n"))
	phpConfigFile.Close()

	return nil
}

func (p *Ldap) ListUser(jsonParams string, _outMsg *string) error {
	fmt.Println("LDAP Plugin : listUser")
	*_outMsg = "0" // return code meaning failure of operation

	cmd := exec.Command("/usr/bin/php", "list_LDAP_accounts.php")
	cmd.Dir = g_LDAPConfig.ScripsDir

	out, err := cmd.Output()
	if err != nil {
		fmt.Printf("Failed to run script list_LDAP_accounts.php, error: %s, output: %s\n",
			err, string(out))
	} else {
		*_outMsg = string(out)
	}

	return nil
}

func (p *Ldap) AddUser(jsonParams string, _outMsg *string) error {
	*_outMsg = "0" // return code meaning failure of operation

	var params AccountParams

	if err := json.Unmarshal([]byte(jsonParams), &params); err != nil {
		r := fmt.Sprintf("ERROR: failed to unmarshal Ldap.AccountParams : %s", err.Error())
		log.Printf(r)
		os.Exit(0)
		*_outMsg = r
		return nil
	}

	cmd := exec.Command("/usr/bin/php", "add_LDAP_user.php", params.Email, params.Password)
	cmd.Dir = g_LDAPConfig.ScripsDir

	out, err := cmd.Output()
	if err != nil {
		fmt.Printf("Failed to run script add_LDAP_user.php for email <%s> and password <%s>, error: %s, output: %s\n",
			params.Email, params.Password, err, string(out))
	} else {
		*_outMsg = string(out)

	}

	return nil
}

func (p *Ldap) ForceDisableAccount(jsonParams string, _outMsg *string) error {
	*_outMsg = "0" // return code meaning failure of operation

	var params AccountParams

	if err := json.Unmarshal([]byte(jsonParams), &params); err != nil {
		r := fmt.Sprintf("ERROR: failed to unmarshal Ldap.AccountParams : %s", err.Error())
		log.Printf(r)
		os.Exit(0)
		*_outMsg = r
		return nil
	}

	//fmt.Println("Running force disable for:", params.UserId)

	// TODO UserId is wrong here, use SAMACCOUNT (this piece of data is not stored yet)
	cmd := exec.Command("/usr/bin/php", "force_disable_LDAP_user.php", params.UserId)
	cmd.Dir = g_LDAPConfig.ScripsDir

	//fmt.Println("Php done")

	out, err := cmd.Output()
	if err != nil {
		fmt.Printf("Failed to run script force_disable_LDAP_user.php for email <%s>, error: %s, output: %s\n",
			params.UserId, err, string(out))

	} else {
		*_outMsg = "1" //success
		//*_outMsg = string(out)

	}

	// Log("LDAP Check... %s account(s) disabled", string(out))

	return nil
}

func (p *Ldap) DisableAccount(jsonParams string, _outMsg *string) error {
	*_outMsg = "0" // return code meaning failure of operation

	var params AccountParams

	if err := json.Unmarshal([]byte(jsonParams), &params); err != nil {
		r := fmt.Sprintf("ERROR: failed to unmarshal Ldap.AccountParams : %s", err.Error())
		log.Printf(r)
		os.Exit(0)
		*_outMsg = r
		return nil
	}

	// *_outMsg = ImpLdapDisableAccount(params.UserId)

	cmd := exec.Command("/usr/bin/php", "disable_LDAP_user.php", params.UserId)
	cmd.Dir = g_LDAPConfig.ScripsDir

	out, err := cmd.Output()
	if err != nil {
		fmt.Printf("Failed to run script disable_LDAP_user.php for email <%s>, error: %s, output: %s\n",
			params.UserId, err, string(out))
	} else {
		// *_outMsg = string(out)
		*_outMsg = "1" // success
	}

	// sPhpScript := fmt.Sprintf("%s/disable_LDAP_user.php ", nan.Config().ScripsDir)
	// cmd := exec.Command("/usr/bin/php", "-f", sPhpScript, "--", _Sam)

	// _, err := cmd.Output()
	// if err != nil {
	// 	LogError("Error returned by script disable_LDAP_user.php, error: %s", err)
	// 	ExitError(nan.ErrSomethingWrong)
	// }

	return nil
}

func main() {

	plugin := &Ldap{}

	pingo.Register(plugin)

	pingo.Run()
}
